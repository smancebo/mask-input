!function(r){function t(r){function t(r,t,a,o){function l(r){var t=e(r,a.mask);return void 0===t?($(f).attr("valida-control",!1),r):($(f).attr("valida-control",!0),t)}function u(r){var t=n(r,a.mask);return t}var v=a.mask,f=$(t);o.$formatters.push(l),o.$parsers.push(u),$(f).unbind("keydown"),$(f).unbind("change"),$(f).on("change",function(t){var i=$(this).val(),o=e(i,a.mask);$(f).val(o),r.ngModel=n($(this).val(),a.mask)}),$(f).on("keydown",function(t){$(f).attr("valida-control",!0);var e=$(this).val().length,o=String.fromCharCode(t.keyCode);if(8!=t.keyCode&&9!=t.keyCode&&17!=t.keyCode&&91!=t.keyCode){t.preventDefault();var l=i(v,e,o);if(void 0===l)return;l===!0?r.$apply(function(){f.val((f.val()+o).trim()),r.ngModel=n(f.val(),a.mask)}):l!==!1?r.$apply(function(){f.val((f.val()+l).trim()),r.ngModel=n(f.val(),a.mask)}):($(f).attr("valida-control",!1),r.ngModel=n(f.val(),a.mask))}})}function e(r,t){var e="";if(void 0!==r)for(var n=0;n<=r.length-1;n++){var a=i(t,e.length,r[n]);if(void 0===a)return;if(a===!0)e=(e+r[n]).trim();else{if(a===!1)return;e=(e+a).trim()}}return e}function n(r,t){var e="";if(void 0!==r){e=r;for(var n=0;n<=r.length;n++){var a=t[n];"#"!==a&&"@"!==a&&"0"!==a&&0!==a&&(e=e.replace(a,""))}}return e.trim()}function a(r,t){return"#"===r?o.alphaNumber.test(t):"@"===r?o.letter.test(t):"0"!==r&&0!==r||o.numbers.test(t)}function i(r,t,e){var n=r[t];if(void 0!==n){if("#"==n)return o.alphaNumber.test(e);if("@"===n)return o.letter.test(e);if(0===n||"0"===n)return o.numbers.test(e);var i=1,l=r[t+i];if(a(l,e)){for(var u=n;"#"!==l&&0!==l&&"0"!==l&&"@"!==l;)u+=l,i+=1,l=r[t+i];return u+e}}}var o={alphaNumber:/[a-zA-Z0-9-_ ]/,numbers:/[0-9]/,letter:/[a-zA-Z]/};return{restrict:"A",require:"ngModel",link:t,scope:{ngModel:"="}}}r.module("safe.mask-text",[]).directive("mask",t),t.$inject=["$timeout"]}(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
